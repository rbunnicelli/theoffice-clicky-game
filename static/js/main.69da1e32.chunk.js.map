{"version":3,"sources":["components/nav/nav.js","components/jumbotron/jumbotron.js","components/cards/cards.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["nav","props","react_default","a","createElement","className","href","title","id","rightOrWrong","score","topScore","jumbotron","cards","value","onClick","click","alt","src","image","footer","target","App","state","friends","clicked","_this","indexOf","scoreIncrement","setState","concat","reset","increaseScoring","shuffle","shuffledCards","array","j","x","i","length","Math","floor","random","shuffleCards","_this2","this","components_nav_nav","components_jumbotron_jumbotron","map","components_cards_cards","shuffled","key","components_footer_footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69da1e32.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./nav.css\";\r\n\r\nconst nav = props => (\r\n    <nav>\r\n        <ul>\r\n            <li className=\"title\">\r\n                <a href=\"/clickygame\">{props.title}</a>\r\n            </li>\r\n\r\n            <li id=\"rightWrong\">{props.rightOrWrong}</li>\r\n\r\n            <li id=\"currentScore\">Current Score: {props.score}</li>\r\n\r\n            <li id=\"highScore\">Top Score: {props.topScore}</li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default nav;","import React from \"react\";\r\nimport \"./jumbotron.css\";\r\n\r\nconst jumbotron = () => (\r\n\t<header className = \"header\">\r\n\t\t<h1>The Office Clicky Game!</h1>\r\n\t\t<h2>Click on any image to earn a point, but don't click on the same picture more than once.</h2>\r\n        <h3>Remember, \"You miss 100% of the shots you don't take -Wayne Gretzky\" -Michael Scott</h3>\r\n\t</header>\r\n);\r\nexport default jumbotron;","import React from \"react\";\r\nimport \"./cards.css\";\r\n\r\nconst cards = props => (\r\n  <div className=\"card\" value={props.id} onClick={() => props.click(props.id)}>\r\n    <div className=\"img-container\">\r\n        <img alt={props.id} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default cards;","//sets up the reusable Footer component\r\nimport React from \"react\";\r\nimport \"./footer.css\";\r\n\r\nconst footer = () => (\r\n\t<header className = \"footer\">\r\n        <a href=\"https://github.com/rbunnicelli/clicky-game\" target=\"_blank\">Github Repo</a>\r\n\t</header>\r\n);\r\n\r\nexport default footer;","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from \"./components/nav\"\nimport friends from \"./friends.json\"\nimport Jumbotron from \"./components/jumbotron\"\nimport Cards from \"./components/cards\"\nimport Footer from \"./components/footer\"\n\nfunction shuffleCards(array) {\n  var j, x, i;\n  for (i = array.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = array[i];\n      array[i] = array[j];\n      array[j] = x;\n  }\n  return array;\n}\n\nclass App extends Component {\n    // Set this.state\n    state = {\n      friends,\n      score: 0,\n      topScore: 0,\n      rightOrWrong: \"Click an image to begin!\",\n      clicked: [],\n    };\n\n    click = id => {\n      if (this.state.clicked.indexOf(id) === -1) {\n        this.scoreIncrement();\n        this.setState({ clicked: this.state.clicked.concat(id)});\n      } else {\n        this.setState({ rightOrWrong: \"Incorrect, Start Over!\" })\n        this.reset();\n      }\n    }\n\n    scoreIncrement = () => {\n      const increaseScoring = this.state.score + 1;\n      this.setState({\n        score: increaseScoring,\n        rightOrWrong: \"Correct! Roo Dit Dit Doo Doo!\"\n      });\n        if (increaseScoring >= this.state.topScore) {\n          this.setState({ topScore: increaseScoring});\n        } else if(increaseScoring === 12) {\n          this.setState({ rightOrWrong: \"You win! Let's all do the Scarn!\"});\n        }\n        this.shuffle();\n    };\n\n    reset = () => {\n      this.setState({\n        friends,\n        score: 0,\n        topScore: this.state.topScore,\n        rightOrWrong: \"Incorrect, click to try again!!\",\n        clicked: [],\n      })\n    }\n\n    shuffle = () => {\n      let shuffledCards = shuffleCards(friends);\n      this.setState({ friends: shuffledCards});\n    }\n  render() {\n    return (\n      <div>\n        <Nav\n          title=\"The Office Clicky Game\"\n          score={this.state.score}\n          topScore={this.state.topScore}\n          rightOrWrong={this.state.rightOrWrong}\n        />\n\n        <Jumbotron />\n\n        <div className=\"container\">\n          {this.state.friends.map(friends => (\n            <Cards\n              click={this.click}\n              scoreIncrement={this.scoreIncrement}\n              reset={this.reset}\n              shuffled={this.shuffle}\n              id={friends.id}\n              key={friends.id}\n              image={friends.image}\n            />\n          ))}\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}